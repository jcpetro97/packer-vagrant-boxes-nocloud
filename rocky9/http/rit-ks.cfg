#
repo --name="AppStream" --baseurl=file:///run/install/sources/mount-0000-cdrom/AppStream

# Where to install from
cdrom
# Perform the installation in a completely non-interactive command line mode
cmdline
# Run the Setup Agent on first boot
firstboot --disable
# accept EULA
eula --agreed
# Enable NetworkManager and sshd services
services --enabled=NetworkManager,sshd
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8
# disable X
skipx
# default network configuration - dhcp
########REVISIT########
network --bootproto=dhcp
########REVISIT########

# set root password

rootpw --iscrypted $6$n13sJARTgU$moCymNDcN12qmJW83Qqtwj7X34ldN7VGHw9KG42qDz8tJMSmtYNL8rNTs/z5/p0EdqrI99e.xnGrnTjdJ05e0.
#rootpw --lock
timesource --ntp-server=129.21.1.111
# set timezone
timezone America/New_York --isUtc
# System bootloader configuration
bootloader --location=mbr --boot-drive=sda
# Clear invalid partition table 
zerombr
# remove existing partitions prior to creation of new partition(s)
clearpart --all --initlabel
# only use sda for this installation
ignoredisk --only-use=sda,sdb
# set selinux mode to disabled.  might need to revisit this one
selinux --disabled
# Team decided to keep firewall disabled and let config management handle it
#firewall --enabled

# Disk partitioning 
part /boot --fstype="xfs" --ondisk=sda --size=2048
part pv.01 --fstype="lvmpv" --ondisk=sda --size=1 --grow
volgroup rootvg --pesize=4096 pv.01
logvol /var  --fstype="xfs" --size=4096 --name=var --vgname=rootvg
logvol /  --fstype="xfs" --size=1 --grow --name=root --vgname=rootvg

part swap --fstype="swap" --ondisk=sdb --size=1 --grow --maxsize=1600000000000

reboot

%packages
@^minimal-environment
wget
tcsh
python3
kexec-tools
nfs-utils
krb5-workstation
net-tools
perl-interpreter
bind-utils
%end

%post

SDC=`awk '/sdc$/{printf "%8.0f\n", $(NF-1) / 1024 / 1024}' /proc/partitions | awk '{printf $1}'`
SDD=`awk '/sdd$/{printf "%8.0f\n", $(NF-1) / 1024 / 1024}' /proc/partitions | awk '{printf $1}'`

if [ "${SDC}" = "16" ] ; then
   VARLOGPV="sdc"
   OPTPV="sdd"
fi
if [ "${SDD}" = "16" ] ; then
   VARLOGPV="sdd"
   OPTPV="sdc"
fi


#
# /var/log sdc
echo | fdisk /dev/${VARLOGPV} <<EOF
o
w
EOF


pvcreate -y /dev/${VARLOGPV}
vgcreate -y varlogvg /dev/${VARLOGPV}
FREE=`vgdisplay varlogvg | egrep Free | awk '{printf $5}'`
lvcreate -y -l${FREE} -nlog varlogvg
mkfs.xfs /dev/varlogvg/log
echo "/dev/mapper/varlogvg-log            /var/log                     xfs    defaults        1 2" >> /etc/fstab
#

if [ `egrep -c varlog /etc/fstab` -ge 1 ] ; then
   mkdir /tmp/log
   mount /dev/varlogvg/log /tmp/log
   cd /var/log
   tar cf - . | ( cd /tmp/log ; tar xpf - ) 
   cd /tmp
   umount /tmp/log
fi

# /opt sdd
echo | fdisk /dev/${OPTPV} <<EOF
o
w
EOF

pvcreate -y /dev/${OPTPV}
vgcreate -y optvg /dev/${OPTPV}
FREE=`vgdisplay optvg | egrep Free | awk '{printf $5}'`
lvcreate -y -l${FREE} -nopt optvg
mkfs.xfs /dev/optvg/opt
mkdir /opt
echo "/dev/mapper/optvg-opt            /opt                     xfs    defaults        1 2" >> /etc/fstab
mount /opt
mkdir /opt/app

groupadd -g 671 ansible
useradd -u 671 -g 671 -s /bin/bash -d /opt/ansible -m -c Ansible ansible
echo 'ansible    ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/ansible

mkdir -p /opt/ansible/.ssh
chmod 700 /opt/ansible/.ssh

# Add packer ssh
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDROgcZHjj+UOrYkyPArFpjah8B8WcgDRV8JlMNIeVCvU4pQpb1HBMmZCsDLYFQyvRhBvsXbjJ792a5tkXqvZLUuI+mdiXBZKbaZp+5vfxiyQVbtPjcb1pmpm+bFkSeUrClC2Cq5w2eeQwJz3eOqbQnZzC9Jd8lWkY0hPunMjLkylM8AF3rSvXFg0Gkvk0PC6d0TUvHGVey8io9/MKObI4O33mWdne8m679C2FrEu8SkFJXnWj71+/4X5Trmc9JWuI+M7uhIMrql9ZHT6ekFer4UvUD4wZDsXCy42zatdeCuuru1YxbOH2g7n09dp7i8DFX+QOGkXeeUXiBnN8shZYJl7tExbpfergkuoYoIthshfxLoFzbEIVcTBOJqLYNsAz2H9BNwYzPgkWZugU5zGaOG4Pa5TazMa130WYm6h67maEiNtNrMTHnK14fWV8l0S7NyRZcWFh1GSTsw9TOw1U3xap+DobU9NgrGyKM9dF3frM+I/9ma0HcNsN7NUJzZ6M= jxpsys@strax.johnpetro.com" >> /opt/ansible/.ssh/authorized_keys
chown -R ansible:ansible /opt/ansible
chmod 600 /opt/ansible/.ssh/authorized_keys

# curl 'https://redhat.rit.edu/pub/bootstrap.sh' > /tmp/bootstrap.sh
# chmod 755 /tmp/bootstrap.sh
# /tmp/bootstrap.sh d-its_systems-d4de0385fbe28749
# rm /tmp/bootstrap.sh
%end
